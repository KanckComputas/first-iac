---
name: Terraform

on:
  push:
    branches:
      - "main"
      - "docs/**"
      - "feature/**"
      - "fix/**"
      - "wip/**"
    paths-ignore:
      - "**/**.md"
  pull_request:
    branches:
      - "docs/**"
      - "feature/**"
      - "fix/**"
      - "wip/**"
    paths-ignore:
      - "**/**.md"

jobs:
  terraform-test-environment:
    name: "Terraform Test Environment"
    runs-on: ubuntu-latest
    environment: test
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-only-cancel-in-progress-jobs-or-runs-for-the-current-workflow
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: false # Do not cancel in progress workflow to preserver Terraform lock state.
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --all --tags --prune --prune-tags \
            && git pull --rebase --all --prune --tags
      - name: "Inject Terraform Documentation"
        uses: terraform-docs/gh-actions@v1
        if: |
          github.event_name != 'pull_request'
          && github.ref_name == 'main'
        with:
          working-dir: .
          output-file: README.md
          output-method: inject
          git-push: "true"
      - name: Azure Login
        uses: azure/login@v1
        # Error: Error building ARM Config: Authenticating using the Azure CLI is only supported as a User (not a Service Principal).
        #
        # To authenticate to Azure using a Service Principal, you can use the separate 'Authenticate using a Service Principal'
        # auth method - instructions for which can be found here: https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret
        #
        # Alternatively you can authenticate using the Azure CLI by using a User Account.
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.1
      - name: Obtain GitHub Secrets
        run: |
          echo "tenant_id = \"${TENANT_ID}\"" >> secrets.tfvars
          echo "subscription_id = \"${SUBSCRIPTION_ID}\"" >> secrets.tfvars
          echo "client_id = \"${CLIENT_ID}\"" >> secrets.tfvars
          echo "client_secret = \"${CLIENT_SECRET}\"" >> secrets.tfvars
          terraform fmt secrets.tfvars
        env:
          TENANT_ID: "${{ secrets.TENANT_ID }}"
          SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
          CLIENT_ID: "${{ secrets.CLIENT_ID }}"
          CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
        shell: bash
      - name: Terraform Format Check
        run: terraform fmt -check
        id: fmt
        continue-on-error: false
      - name: Terraform Format
        run: terraform fmt -recursive .
        continue-on-error: false
      - name: Terraform Initialize
        id: init
        run: |
          export STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group <SYSTEM_NAME>-<ENVIRONMENT_NAME> --account-name <TFSTATE_STORAGE_ACCOUNT_NAME> --output tsv --query '[0].[value]')
          export ARM_ACCESS_KEY=${STORAGE_ACCOUNT_KEY}
          terraform init -var-file="secrets.tfvars"
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Import
        id: import
        run: |
          export STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group <SYSTEM_NAME>-<ENVIRONMENT_NAME> --account-name <TFSTATE_STORAGE_ACCOUNT_NAME> --output tsv --query '[0].[value]')
          export ARM_ACCESS_KEY=${STORAGE_ACCOUNT_KEY}

          # set -vx
          # TODO: Do not delete these commented Terraform Import codes as we might need them for manual synchronization work in the future.
          # terraform import -var-file="secrets.tfvars" \
          #   module.resourcegroup_apimanagement.azurerm_resource_group.resource_group \
          #   /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/<SYSTEM_NAME>-<ENVIRONMENT-NAME>

        continue-on-error: false
      # - name: Install Tools
      #   id: install-tools
      #   shell: bash
      #   run: |
      #     sudo apt-get install \
      #       graphviz \
      #       --assume-yes
      - name: Terraform Plan
        id: plan
        env:
          PYTHON_DEPS: MarkupSafe==2.0.1 # TODO: Fix ImportError: cannot import name 'soft_unicode' from 'markupsafe' error for blast-radius tool.
        run: |
          export STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group <SYSTEM_NAME>-<ENVIRONMENT_NAME> --account-name <TFSTATE_STORAGE_ACCOUNT_NAME> --output tsv --query '[0].[value]')
          export ARM_ACCESS_KEY=${STORAGE_ACCOUNT_KEY}
          TF_LOG=ERROR terraform plan -var-file="secrets.tfvars" | tee terraform-plan.log
          # https://stackoverflow.com/questions/59191913/how-do-i-get-the-output-of-a-specific-step-in-github-actions/66713349#66713349
          # EXIT_RESULT_CODE=${PIPESTATUS[0]}
          # echo "::set-output name=terraform-plan-log::$(cat terraform-plan.log)"
          # exit ${EXIT_RESULT_CODE}
        continue-on-error: false
      - name: Detect Changes
        if: |
          github.event_name != 'pull_request'
          && github.ref_name == 'main'
        run: |
          # set -xv
          if [[ -z $(grep "Your infrastructure matches the configuration." terraform-plan.log) ]]; then
            echo "Changes detected.... Please review thoroughly the planned changes...."
            echo "PROCEED_TERRAFORM_APPLY=true" >> "${GITHUB_ENV}"
          else
            echo "No changes.... Your infrastructure matches the configuration...."
            echo "PROCEED_TERRAFORM_APPLY=false" >> "${GITHUB_ENV}"
          fi
        continue-on-error: false
        shell: bash
      - uses: trstringer/manual-approval@v1
        if: |
          github.event_name != 'pull_request'
          && github.ref_name == 'main'
          && env.PROCEED_TERRAFORM_APPLY == 'true'
        timeout-minutes: 5
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          # TODO: Why does @EnergiMidt/plattform team not work as approvers?
          approvers: <APPROVER_USERNAME_1>, <APPROVER_USERNAME_2>
          minimum-approvals: 1
          issue-title: "Apply Terraform changes?"
      - name: Terraform Apply
        id: apply
        if: |
          github.event_name != 'pull_request'
          && github.ref_name == 'main'
          && env.PROCEED_TERRAFORM_APPLY == 'true'
        run: |
          export STORAGE_ACCOUNT_KEY=$(az storage account keys list --resource-group <SYSTEM_NAME>-<ENVIRONMENT_NAME> --account-name <TFSTATE_STORAGE_ACCOUNT_NAME> --output tsv --query '[0].[value]')
          export ARM_ACCESS_KEY=${STORAGE_ACCOUNT_KEY}
          TF_LOG=ERROR terraform apply -var-file="secrets.tfvars" -auto-approve
        continue-on-error: false
      - name: GitHub Scripts Display Output
        uses: actions/github-script@v6
        if: |
          github.event_name == 'push'
          || (github.event_name == 'pull_request' && github.head_ref == 'main')
        env:
          PLAN: "\n················\n${{ steps.plan.outputs.stdout }}················\n\n"
          APPLY: "\n················\n${{ steps.apply.outputs.stdout }}················\n\n"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖 \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            #### Terraform Apply 🚨 \`${{ steps.apply.outcome }}\`

            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.Apply}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
